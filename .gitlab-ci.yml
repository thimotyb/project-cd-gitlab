# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build 
  - test
  - release
  - publish
  - run_container
  - run_package
  - deploy

build_app:
  stage: build
  script:
    - mkdir my_app
    - mkdir release
    - export TIMESTAMP=$(date +%s)
    - touch my_app/my_app_$TIMESTAMP
    - echo "hello this is my code" >> my_app/my_app_$TIMESTAMP
    - tar -czvf release/my_app_$TIMESTAMP.tar.gz my_app/.
  artifacts:
    paths:
      - release/*.tar.gz

publish_to_registry:
  stage: publish
  script:
    - cd release
    - export PACKAGE_FILE=$(ls | grep *.tar.gz)
    - echo $PACKAGE_FILE
    - curl --user "test:gldt-gAByff85d_Nju8mPcLvt" --upload-file $PACKAGE_FILE "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/stable_releases/0.0.1/$PACKAGE_FILE"
  dependencies:
    - build_app

publish_to_container_registry:
  stage: publish
  image: docker:stable
  services:
    - docker:dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/my_app/0.0.1
  script:
    - ls
    - echo $CI_REGISTRY
    - docker login -u "test" -p "gldt-gAByff85d_Nju8mPcLvt" $CI_REGISTRY
    - docker build -t $IMAGE .
    - docker push $IMAGE
  dependencies:
    - build_app
    - release_job

use_container_from_registry:
  stage: run_container
  image: $CI_REGISTRY_IMAGE/my_app/0.0.1
  script:
    - ls -al     # Show the current directory as our container's working directory
  dependencies:
    - publish_to_container_registry

deploy_k8s:
  stage:
    deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config get-contexts
    - kubectl config use-context thimoty/project-cd-test:killercoda
    - kubectl get pods
    - kubectl delete pods --all
    - kubectl run myapp --image $CI_REGISTRY_IMAGE/my_app/0.0.1
    - kubectl get pods
    - kubectl describe pod myapp
  dependencies:
    - publish_to_container_registry

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
    - echo "TAG=$TAG" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env
  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: 'v0.$CI_PIPELINE_IID'                # The version is incremented per pipeline.
    description: 'v0.$CI_PIPELINE_IID'
    ref: '$CI_COMMIT_SHA'                          # The tag is created from the pipeline SHA.



